/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.45
 * Generated at: 2019-10-28 15:44:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.Board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class PaymentTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>결제 페이지</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.12.4.min.js\" ></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://cdn.iamport.kr/js/iamport.payment-1.1.5.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<form method=\"post\" id=\"submit\">\r\n");
      out.write("\r\n");
      out.write("<input type=\"text\" id=\"cInput4\" name=\"Cname\">\t<!-- 주문자 이름-->\r\n");
      out.write("<input type=\"text\" id =\"phone\" name=\"phone\"> <!-- 연락처 -->\r\n");
      out.write("<input type=\"text\" id=\"cInput8\" name=\"Cadd\">\t<!-- 주소1 -->\r\n");
      out.write("<input type=\"text\" id=\"cInput9\" name=\"Cadd\">\t<!-- 주소2 -->\r\n");
      out.write("<input type=\"text\" id=\"cInput10\" name=\"Cadd\">\t<!-- 주소3 -->\r\n");
      out.write("<input type=\"text\" id=\"cInput11\" name=\"pPlz\">\t<!-- 배송 요청사항  -->\r\n");
      out.write("<input type=\"text\" id=\"cInput12\" name =\"pCount\">\t<!--이메일 -->\r\n");
      out.write("<input type=\"text\" id=\"cInput\">\t<!-- 결제수단 -->\r\n");
      out.write("<input type=\"text\" id=\"cInput3\" name =\"pPrice\">\t<!-- 가격 -->\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\twindow.onload = function () {\r\n");
      out.write("\t\tdocument.getElementById(\"cInput\").value = opener.document.getElementById(\"throw\").value;\t// 결제수단\r\n");
      out.write("\t\tdocument.getElementById(\"cInput4\").value = opener.document.getElementById(\"v_name\").value; \t// 주문자 이름\r\n");
      out.write("\t\tdocument.getElementById(\"phone\").value = opener.document.getElementById(\"v_phone\").value; // 연락처\r\n");
      out.write("\t\tdocument.getElementById(\"cInput8\").value = opener.document.getElementById(\"sample6_address\").value; // 주소1\r\n");
      out.write("\t\tdocument.getElementById(\"cInput9\").value = opener.document.getElementById(\"sample6_extraAddress\").value; // 주소2\r\n");
      out.write("\t\tdocument.getElementById(\"cInput10\").value = opener.document.getElementById(\"sample6_detailAddress\").value; // 주소3\r\n");
      out.write("\t\tdocument.getElementById(\"cInput11\").value = opener.document.getElementById(\"selbox\").value; // 배송요청사항\r\n");
      out.write("\t\tdocument.getElementById(\"cInput12\").value = opener.document.getElementById(\"Cemail\").value; // 이메일\r\n");
      out.write("\t\t\r\n");
      out.write("\tvar payee = document.getElementById(\"cInput\").value;\t// 결제수단\r\n");
      out.write("\tvar pname = document.getElementById(\"cInput4\").value;\t// 주문자 이름\r\n");
      out.write("\tvar phone = document.getElementById(\"phone\").value;\t\t// 연락처\r\n");
      out.write("\tvar email = document.getElementById(\"cInput12\").value;\t\t// 이메일\r\n");
      out.write("\tvar plz = document.getElementById(\"cInput11\").value;\t\t// 배송요청사항\r\n");
      out.write("\tvar IMP = window.IMP; // 생략가능\r\n");
      out.write("\tIMP.init('iamport'); // 'iamport' 대신 부여받은 \"가맹점 식별코드\"를 사용\r\n");
      out.write("\t\r\n");
      out.write("\tIMP.request_pay({\r\n");
      out.write("\t    pg : 'inicis', // version 1.1.0부터 지원.\r\n");
      out.write("\t    pay_method : payee,\r\n");
      out.write("\t    merchant_uid : 'merchant_' + new Date().getTime(),\r\n");
      out.write("\t    name : '주문명:결제테스트',\r\n");
      out.write("\t    amount : 14000,\r\n");
      out.write("\t    buyer_email : email,\r\n");
      out.write("\t    buyer_name : pname,\r\n");
      out.write("\t    buyer_tel : phone,\r\n");
      out.write("\t    buyer_addr : '서울특별시 강남구 삼성동',\r\n");
      out.write("\t    buyer_postcode : '123-456',\r\n");
      out.write("\t    m_redirect_url : 'https://www.yourdomain.com/payments/complete'\r\n");
      out.write("\t}, function(rsp) {\r\n");
      out.write("\t    if ( rsp.success ) {\r\n");
      out.write("\t        var msg = '결제가 완료되었습니다.';\r\n");
      out.write("\t        msg += '고유ID : ' + rsp.imp_uid;\r\n");
      out.write("\t        msg += '상점 거래ID : ' + rsp.merchant_uid;\r\n");
      out.write("\t        msg += '결제 금액 : ' + rsp.paid_amount;\r\n");
      out.write("\t        msg += '카드 승인번호 : ' + rsp.apply_num;\r\n");
      out.write("\t    } else {\r\n");
      out.write("\t        var msg = '결제에 실패하였습니다.';\r\n");
      out.write("\t        msg += '에러내용 : ' + rsp.error_msg;\r\n");
      out.write("\t    }\r\n");
      out.write("\t    alert(msg);\r\n");
      out.write("\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
